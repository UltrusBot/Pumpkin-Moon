plugins {
	alias libs.plugins.fabric.loom
	alias libs.plugins.loom.quiltflower
	alias libs.plugins.publishing
	id 'maven-publish'
}
version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		name 'Quilt'
		url 'https://maven.quiltmc.org/repository/release'
	}
//	maven {
//		url 'https://jitpack.io'
//	}
}

dependencies {
	minecraft(libs.minecraft)
	mappings(variantOf(libs.quilt.mappings) { classifier("intermediary-v2") })
	modImplementation(libs.fabric.loader)
	modImplementation(libs.fabric.api)
//	implementation(libs.mixinextras)
//	annotationProcessor(libs.mixinextras)
//	include(libs.mixinextras)
}
publishMods {
	displayName = "Pumpkin Moon v$project.version"
	file = remapJar.archiveFile
	changelog = file("$rootDir/CHANGELOG.md").text
	version = project.version
	type = STABLE
	modLoaders.addAll("fabric", "quilt")
	curseforge {
		projectId = "931339"
		minecraftVersions.add("1.20.1")
		accessToken = providers.environmentVariable("CF_API_KEY")
	}
	modrinth {
		projectId = "7QpMAl7m"
		minecraftVersions.add("1.20.1")
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
	}
	github {
		repository = "UltrusBot/Pumpkin-Moon"
		commitish = "1.20.1"
		accessToken = providers.environmentVariable("GH_TOKEN")
		tagName = "v$project.version"
	}

	dryRun = false
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
	var environment = System.getenv("ENVIRONMENT") ?: "production"
	if (environment != "production") {
		from(rootProject.rootDir.absolutePath + "/testdata") { into 'data' }
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
loom {
	runs {
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"

			runDir "build/datagen"
		}
	}
}

jar {
	from("LICENSE") {
		rename { "LICENSE_${archives_base_name}" }
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}



java {
	withSourcesJar()
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}